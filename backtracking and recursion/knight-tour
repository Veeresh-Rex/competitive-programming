#include <bits/stdc++.h>
using namespace std;
#define gc getchar_unlocked
#define fo(i, n) for (i = 0; i < n; i++)
#define Fo(i, k, n) for (i = k; k < n ? i < n : i > n; k < n ? i += 1 : i -= 1)
#define ll long long
#define si(x) scanf("%d", &x)
#define sl(x) scanf("%lld", &x)
#define ss(s) scanf("%s", s)
#define pi(x) printf("%d\n", x)
#define pl(x) printf("%lld\n", x)
#define ps(s) printf("%s\n", s)
#define deb(x) cout << #x << "=" << x << endl
#define deb2(x, y) cout << #x << "=" << x << "," << #y << "=" << y << endl
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(x) memset(x, 0, sizeof(x))
#define sortall(x) sort(all(x))
#define tr(it, a) for (auto it = a.begin(); it != a.end(); it++)
#define PI 3.1415926535897932384626
typedef pair<int, int> pii;
typedef pair<ll, ll> pl;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<pii> vpii;
typedef vector<pl> vpl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
int mpow(int base, int exp);
void ipgraph(int m);
void dfs(int u, int par);
bool isValid(int x, int y, vvi sol)
{
    if (x >= 0 && x < sol.size() && y >= 0 && y < sol.size() && sol[x][y] == -1)
        return true;
    return false;
}
void printKT(vvi sol)
{
    for (int i = 0; i < sol.size(); i++)
    {
        for (int j = 0; j < sol.size(); j++)
            cout << sol[i][j] << " ";
        cout << "\n";
    }
}
bool KnightTour(int x, int y, int step, int xMove[], int yMove[], vvi &sol)
{
    int n = sol.size();
    if (step == n * n - 1)
        return true;
    for (int k = 0; k < n; k++)
    {
        int nextX = x + xMove[k];
        int nextY = y + yMove[k];
        if (isValid(nextX, nextY, sol))
        {
            sol[x][y] = step;
            if (KnightTour(nextX, nextY, step + 1, xMove, yMove, sol))
                return true;
            else
                sol[x][y] = -1;
        }
    }
    return 0;
}
void solve(int n)
{
    vvi sol(n, vi(n, -1));
    int xMove[n] = {2,
                    1,
                    -1,
                    -2,
                    -2,
                    -1,
                    1,
                    2};
    int yMove[n] = {
        1,
        2,
        2,
        1,
        -1,
        -2,
        -2,
        -1};
    int stepCount = 0;
    if (KnightTour(0, 0, stepCount, xMove, yMove, sol) == false)
        cout << "No solution";
    else
    {
        printKT(sol);
    }
}
int32_t main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    solve(n);
}
